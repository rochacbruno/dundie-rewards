[project]
name="dundie"
description="Reward Point System for Dunder Mifflin"
authors = [
    {name = "Bruno Rocha", email = "Bruno@rocha.com"}
]
requires-python=">=3.9"
license = {text = "MIT"}
dynamic = ["version", "readme"]
dependencies = [
    "aiosmtpd>=1.4.6",
    "alembic>=1.13.3",
    "click>=8.1.7",
    "flet[all]==0.28.3",
    "httpx>=0.27.2",
    "pwdlib[argon2]>=0.2.1",
    "pydantic>=2.0",
    "rich>=13.9.3",
    "rich-click>=1.8.3",
    "setuptools>=75.2.0",
    "sqlalchemy>=2",
    "sqlmodel>=0.0.24",
]

[project.urls]
Homepage = 'https://dundermifflin.com'
Source = 'https://github.com/dm/dundie'

[project.scripts]
dundie = "dundie.__main__:main"
dundie-app = "dundie.app:run"

[project.optional-dependencies]
test = [
    "coverage>=7.6.4",
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-forked>=1.6.0",
    "types-setuptools>=75.2.0.20241025",
]

[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = 'setuptools.build_meta'

[tool.setuptools]
packages = ["dundie"]

[tool.setuptools.dynamic]
readme = {file = ["README.md"]}

[tool.setuptools_scm]
write_to = "dundie/VERSION.txt"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -vv"
testpaths = [
    "tests",
    "integration",
]

[dependency-groups]
dev = [
    "ipdb>=0.13.13",
    "pytest-watch>=4.2.0",
    "taskipy>=1.14.0",
    "types-setuptools>=75.2.0.20241025",
]

[tool.ruff]
line-length = 79
indent-width = 4
target-version = "py310"

[tool.taskipy.tasks]
lint = "uvx ruff check dundie integration tests"
fmt = "uvx ruff format dundie integration tests"
test = """
    uv run --extra test pytest -s --cov=dundie --forked
    uv run --extra test coverage xml
    uv run --extra test coverage html
    """
docs = "uvx mkdocs build --clean"
docs-serve = "uvx mkdocs serve"
clean = """
    find ./ -name '*.pyc' -exec rm -f {} \\;
    find ./ -name '__pycache__' -exec rm -rf {} \\;
    find ./ -name 'Thumbs.db' -exec rm -f {} \\;
    find ./ -name '*~' -exec rm -f {} \\;
    rm -rf {.cache,.pytest_cache,.mypy_cache,htmlcov,docs/_build}
    """
resetdb = """
    read -p "Are you sure you want to reset the project db? [y/N] " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        rm -rf assets/database.db
        uv run python -m aiosmtpd -n &
        uv run dundie load assets/people.csv
        uv run alembic stamp head
        pkill -fc aiosmtpd
    fi
    """
