from __future__ import annotations

from typing import Optional

from sqlmodel import Session, select

from dundie.models import Balance, Movement, Person, User
from dundie.settings import EMAIL_FROM
from dundie.utils.email import send_email
from dundie.utils.user import get_password_hash


def add_person(
    session: Session,
    instance: Person,
    password: str | None = None,
):
    """Saves person data to database.

    - If exists, update, else create
    - Set initial balance (managers = 100, others = 500)
    - Generate a password if user is new and send_email
    """
    existing = session.exec(
        select(Person).where(Person.email == instance.email)
    ).first()
    created = existing is None
    if created:
        session.add(instance)
        set_initial_balance(session, instance)
        password = set_initial_password(session, instance, password)
        # TODO: Usar sistema de filas (conteudo extra)
        send_email(
            EMAIL_FROM, [instance.email], "Your dundie password", password
        )
        return instance, created
    elif isinstance(existing, Person):
        existing.dept = instance.dept
        existing.role = instance.role
        existing.currency = instance.currency
        session.add(existing)
        return instance, created


def set_initial_password(
    session: Session,
    instance: Person,
    password: str | None = None,
) -> str:
    """Generates, hashes and saves password"""
    user = User(person=instance)  # password generated by model

    if password is not None:
        user.password = password
    else:
        password = user.password

    # save to database the password hashed
    user.password = get_password_hash(user.password)
    session.add(user)
    # return the plain password for email
    # NOTE: The recommendation is not to send passwords via e-mail
    # A future improvement is to send user a disposable link for first login.
    return password


def set_initial_balance(session: Session, person: Person):
    """Add movement and set initial balance"""
    value = 100 if person.role == "Manager" else 500
    add_movement(session, person, value)


def add_movement(
    session: Session,
    person: Person,
    value: int,
    actor: Optional[str] = "system",
):
    """Adds movement to user account.

    Example::

        add_movement(db, Person(...), 100, "me")

    """
    movement = Movement(person=person, value=value, actor=actor)
    session.add(movement)

    movements = session.exec(select(Movement).where(Movement.person == person))

    total = sum([mov.value for mov in movements])

    existing_balance = session.exec(
        select(Balance).where(Balance.person == person)
    ).first()
    if existing_balance:
        existing_balance.value = total
        session.add(existing_balance)
    else:
        session.add(Balance(person=person, value=total))
